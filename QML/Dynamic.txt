直接console.log()一个对象的id, 就可以看到C++类型了
然后进头文件找
Q_PROPERTY宏就是用来定义QML中可访问属性的。 NOTIFY后面的字段就是与属性绑定的信号的名字


//鼠标
//左键改变矩形区域颜色, 右键退出应用
Rectangle {
    width: 320;
    height: 240;
    MouseArea {
        anchors.fill: parent;
        enabled: true
        acceptedButtons: Qt.LeftButton | Qt.RightButton;  //  接受哪些鼠标按键产生的事件(左中右)
        onClicked: {  //clicked信号带有的参数类型为MouseEvent, 名为 mouse, button携带按下的按键的信息
            if (mouse.button == Qt.RightButton) {
                Qt.quit();
            }else if (mouse.button == Qt.LeftButton) {
                color = Qt.rgba( (mouse.x % 255) / 255.0, (mouse.y % 255) / 255.0, 0.6, 1.0 );
            }
            mouse.accecpted = true
        }
        onDoubleClicked: {
            color = "gray";
            mouse.accecpted = true
        }
    }
}


//键盘
//通过方向键移动字符串, 按空格键选中复选框, Esc退出应用
import QtQuick 2.2
import QtQuick.Controls 1.2

Rectangle {
    width: 320;  height: 480;
    color: "gray"
    focus: true
    Keys.enabled: true;
    Keys.onEscapePressed: {
        Qt.quit();
    }
    Keys.forwardTo: [moveText, likeQt];
    
    Text {
        id: moveText
        x: 20;  y: 20;
        width: 200;  height: 30;
        text: "Moving Text"
        color: "blue"
        font { bold: true;  pixelSize: 24; }
        Keys.enabled: true
        Keys.onPressed: {
            switch (event.key) {
            case Qt.Key_Left: x -= 10; break;
            case Qt.Key_Right: x += 10; break;
            case Qt.Key_Up: y -= 10; break;
            case Qt.Key_Down: y += 10; break;   
            default: return;    
            }
            event.accepted = true;
        }
    }
    
    CheckBox {
        id: likeQt;
        text: "Like Qt Quick"
        anchors略
        z: 1
    }
}


Keys
由Qt Quick提供, 供Item对象处理按键事件. 
针对特定按键的信号: returnPressed, escapePressed, downPressed, digit()Pressed, backPressed ... 
普通信号: pressed, released. 这两个信号有一个名为event, 类型为KeyEvent的参数.包含了按键的详细信息
KeyEvent代表一个按键事件, 如果一个按键被处理, event.accecpted应该被设置为true. 以免它被继续传递
三个属性
    enabled whether we handle a press event
    forwardTo   list, 它表示传递按键事件给列表内的对象, 如果某个对象accept了某个按键,那位列其后的
        对象就不会收到该按键事件. 上例代码中, moveText在前面, 如果它消耗掉某个键, likeQt就收不到了.
    priority 设置Keys附加属性的优先级, 2种: Item之前处理(默认), Item之后处理
        CheckBox本身会处理按键. 不需要附加Keys对象来再次处理按键事件

如果想让某个元素处理按键, 需要focus. 


QtObject {
    id: attr
    property int count;
    Component.onCompleted: {
        count = 10;
    }
}


KeyNavigation.right: blueColor;



1. Component
Component只能包含一个顶层Item, 而且在这个Item之外不能定义任何数据,除了id.

Component通常用来给一个view提供图形化组件, 比如ListView::delegate属性就需要一个Component来指定
    如何显示列表的每一个项, 又比如ButtonStyle::background属性也需要一个Component来指定
    如何绘制Button的背景

Component不是Item的派生类, 而是QQmlComponent的子类. 虽然它通过自己的顶层Item为其他的view
    提供可视化组件, 但其本身是不可见元素. 可以按照如下理解:
        你定义的组件是一个新的类型, 必须被实例化以后才可以显示.

在QML文档中嵌入式定义组件时需要Component对象.


2.  Loader
Loader用来动态加载QML组件， 可以把Loader作为占位符使用，在需要显示某个元素时， 才使用Loader加载进来。

Loader可以用source属性加载一个QML文档， 也可以通过sourceComponent属性加载一个Component对象。
当Loader的source或sourceComponent属性发生变化时， 之前加载的对象自动销毁， 新对象会被加载。
将source设置为空串或将sourceComponent设置为undefined， 将会销毁当前加载的对象，相关资源也会被释放， 
    Loader成为空对象。

item属性指向它加载的组件的顶层Item， 对于Loader加载的Item， 它暴露出来的属性， 信号等， 都可以通过item访问。

动态信号连接可以使用Connections
Connections {
    target: redLoader.item
    onColorPicked: {//直接响应target的信号并且可使用参数
        coloredText.color = clr;
    }
}

如果Loader加载的Item想处理按键事件， 那么必须将Loader对象的focus属性设置为true。
如果它加载的Item处理了按键事件， 则应当将事件的accepted属性设置为true，以免已经被吃掉的事件再传给Loader。
因为Loader本身也是一个焦点敏感组件，可以处理键盘/鼠标事件

